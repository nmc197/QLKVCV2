#pragma checksum "C:\Users\Cuong\source\repos\QuanLyKVC\QuanLyKVC\Views\Shared\Core\HoaDon\AdminList.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d8c18a267f921eaa64ce8f1635978c1ac5fbd98c"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Shared_Core_HoaDon_AdminList), @"mvc.1.0.view", @"/Views/Shared/Core/HoaDon/AdminList.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Cuong\source\repos\QuanLyKVC\QuanLyKVC\Views\_ViewImports.cshtml"
using QuanLyKVC;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Cuong\source\repos\QuanLyKVC\QuanLyKVC\Views\_ViewImports.cshtml"
using QuanLyKVC.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d8c18a267f921eaa64ce8f1635978c1ac5fbd98c", @"/Views/Shared/Core/HoaDon/AdminList.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d988f997541997c8748f33a2cbcaffc738a19951", @"/Views/_ViewImports.cshtml")]
    public class Views_Shared_Core_HoaDon_AdminList : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("action", new global::Microsoft.AspNetCore.Html.HtmlString(""), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "POST", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("onsubmit", new global::Microsoft.AspNetCore.Html.HtmlString("updateItem(updatingItemId); return false;"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.SingleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("role", new global::Microsoft.AspNetCore.Html.HtmlString("form"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n    \r\n");
#nullable restore
#line 3 "C:\Users\Cuong\source\repos\QuanLyKVC\QuanLyKVC\Views\Shared\Core\HoaDon\AdminList.cshtml"
      
        ViewData["Title"] = "Hóa đơn";
        Layout = "_NovaticAdmin";
    

#line default
#line hidden
#nullable disable
            WriteLiteral(@"    

    <div class=""page-header card"">
        <div class=""col"">
            <div class=""page-header-title"">
                <i class=""fa fa-server""></i>
                <div class=""d-inline"">
                    <h3 class=""tableTitle"">Hóa đơn</h3>
                </div>
            </div>

            <a href=""#"" id=""btnAddItem"" onclick=""editItem(0);"" class=""btn btn-brand btn-elevate btn-icon-sm"">
                <i class=""fa fa-plus""></i>
                <span class='hideOnMobile'>New Record</span>
            </a>
        </div>
    </div>

    <div class=""pcoded-inner-content"">
        <div class=""main-body"">
            <div class=""page-wrapper"">

                <!-- Page-body start -->
                <div class=""page-body"">
                    <div class=""card"">
                        <div class=""card-block novaticContainer"">
                            <div class=""dt-responsive table-responsive"">

                                <table id=""tableData"" class=""table table-");
            WriteLiteral(@"hover"">
                                    <thead>
                                        <tr>
                                            <th>Index</th>
						<th>ngayHD</th>
						<th>tongTien</th>

                                            <th>Detail</th>
                                            <th>Delete</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                    </tbody>
                                    <tfoot>
                                        <tr>
                                            <th>Index</th>
						<th>ngayHD</th>
						<th>tongTien</th>

                                            <th> </th>
                                            <th> </th>
                                        </tr>
                                    </tfoot>
                                </table>

                                <div class=""modal fade"" id=""moda");
            WriteLiteral(@"l-id"">
                                    <div class=""modal-dialog modal-lg"">
                                        <div class=""modal-content"">
                                            <div class=""modal-header bg-gradient-info"">
                                                <button type=""button"" class=""close"" data-dismiss=""modal""
                                                    aria-hidden=""true"">&times;</button>
                                                <h4 class=""modal-title""><i class=""fa fa-edit""></i> Detail item</h4>
                                            </div>
                                            <div class=""modal-body"">


                                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d8c18a267f921eaa64ce8f1635978c1ac5fbd98c7844", async() => {
                WriteLiteral(@"

                                                    <!-- <div class=""form-group"">
                                                                        <label for="""">Apply type Id</label>
                                                                        <input type=""text"" class=""form-control""
                                                                            id=""HoaDonId"" required readonly
                                                                            placeholder="""">
                                                                    </div>


                                                                    <div class='form-group'>
                                                                        <label for=''>Apply type name</label>
                                                                        <input type='text' class='form-control'
                                                                            id='HoaDonName' required
             ");
                WriteLiteral(@"                                                               placeholder=''>
                                                                    </div>


                                                                    <div class='form-group'>
                                                                        <label for=''>Description</label>
                                                                        <input type='text' class='form-control'
                                                                            id='HoaDonDescription'
                                                                            placeholder=''>
                                                                    </div>


                                                                    <div class='form-group'>
                                                                        <label for=''>CreatedTime</label>
                                                                        <inp");
                WriteLiteral(@"ut type='text'
                                                                            class='form-control datetimepicker'
                                                                            id='HoaDonCreatedTime'
                                                                            placeholder=''>
                                                                    </div>


                                                                    <div class='form-group' style="""">
                                                                        <label for=''>Active</label>
                                                                        <input type='text' class='form-control'
                                                                            id='HoaDonActive' readonly
                                                                            placeholder=''>
                                                                    </div>
                               ");
                WriteLiteral(@"                                     -->
                                                    




                                                    <input style=""display:none"" id=""hiddenSubmit"" type=""submit""
                                                        class=""btn btn-default"" value=""Save changes"">
                                                ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"


                                            </div>
                                            <div class=""modal-footer"">
                                                <button type=""button"" class=""btn btn-default""
                                                    data-dismiss=""modal"">Close</button>
                                                <button type=""button"" class=""btn btn-primary"" id=""btnUpdateItem""
                                                    onclick=""document.getElementById('hiddenSubmit').click();"">Save
                                                    changes</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
                             
    
    <script>
    ");
            WriteLiteral(@"    var hiddenItem = [""maHD""];
        var showItem = [""ngayHD"",""tongTien""];
        var dataSource = [];
        var updatingItemId = 0;
        var tableUpdating = 0;
        var table;

        $(document).ready(function () {
            // Load data
            //loadData();
            setTimeout(function(){loadData();}, 460);                

            // includeLibrary();

            // Datetime picker
            $('.datetimepicker').datetimepicker({
                format: 'YYYY-MM-DD HH:mm:ss'
            });

            $('.dataSelect').select2();

            $("".datetimepicker"").on('dp.change', function (e) {
                // console.log(this.value);
                this.value = moment(this.value).format(""YYYY-MM-DD HH:mm:ss"");
                // console.log(this.value);
            })

        });


        function loadData() {
            $.ajax({
                url: systemURL+ ""HoaDon/api/list"",
                type: ""GET"",
                contentType:");
            WriteLiteral(@" ""application/json"",
                success: function (responseData) {
                    // debugger;
                    var data = responseData.data;
                    dataSource = data;




                    data.forEach(function (item, index) {
                        // console.log(item, index);
                        var rowContent = """";
                        rowContent += ""<td style='text-align: center;'>"" + (index + 1) + ""</td>"";
                        for (var key in item) {
                            if (item.hasOwnProperty(key)) {
                                // console.log(key + "" -> "" + item[key]);
                                if (showItem.includes(key)) {
                                    if (key != ""photo"") {
                                        rowContent += ""<td class='row"" + item.id + ""-column column-"" + key + ""' property='"" + key + ""'>"" + item[key] + ""</td>"";
                                    }
                                    else {
        ");
            WriteLiteral(@"                                rowContent += ""<td class='row"" + item.id + ""-column column-"" + key + ""' property='"" + key + ""'><img src='"" + item[key] + ""' style='height:80px;' /></td>"";
                                    }
                                }
                            }
                        }
                        rowContent += ""<td style='text-align: center;'><a onclick='editItem("" + item.id + "")'><i class='fa fa-edit fa-2x' style='color:#03a9f4'></i></a></td>"";
                        rowContent += ""<td style='text-align: center;'><a onclick='deleteItem("" + item.id + "")'><i class='fa fa-trash fa-2x' style='color:#e91e63'></i></a></td>"";
                        
                        var newRow = ""<tr id='row""+item.id+""' >"" + rowContent + ""</tr>"";
                        $(newRow).appendTo($(""#tableData tbody""));
                        
                        // $(""#tableData #dummyRow"").after(""<tr id='row""+item.id+""' >"" + rowContent + ""</tr>"");
                    });");
            WriteLiteral(@"

                    //Init datatable
                    if (tableUpdating === 0) {
                        initTable();
                    }

                    //update data with foreign key
                    updateTable();
                },
                error: function (e) {
                    //console.log(e.message);
                    initTable();
                }
            });
        }

        function initTable(){
            table = $('#tableData').DataTable({
                aLengthMenu: [
                    [10, 25, 50, 100, 200, -1],
                    [10, 25, 50, 100, 200, 'Tất cả']
                ],
                'order': [
                    [1, 'desc']
                ]
            });


            
            table.on('order.dt search.dt', function() {
                table.column(0, {
                    search: 'applied',
                    order: 'applied'
                }).nodes().each(function(cell, i) {
                    ce");
            WriteLiteral(@"ll.innerHTML = i + 1;
                });
            }).draw();

            $('#tableData tfoot th:not(:last-child):not(:nth-last-child(2))').each(function() {
                var title = $(this).text();
                $(this).html(""<input type='text' class='tableFooterFilter' placeholder=' ' />"");
            });

            table.columns().every(function() {
                var that = this;

                $('input', this.footer()).on('keyup change', function() {
                    if (that.search() !== this.value) {
                        that
                            .search(this.value)
                            .draw();
                    }
                });
            });
        }

        function editItem(id) {
            updatingItemId = id;
            $(""#modal-id"").modal('show');

            let obj = getItemById(id);
            		$(""#HoaDonMaHD"").val(id > 0 ? obj.maHD : """");
		$(""#HoaDonNgayHD"").val(id > 0 ? obj.ngayHD : """");
		$(""#HoaDonTongTien"").v");
            WriteLiteral(@"al(id > 0 ? obj.tongTien : """");

            // $(""#HoaDonId"").val(id > 0 ? obj.id : """");
            // $(""#HoaDonName"").val(id > 0 ? obj.name : """");
            // $(""#HoaDonDescription"").val(id > 0 ? obj.description : """");
            // $(""#HoaDonCreatedTime"").val(id > 0 ? obj.createdTime : """");
            // $(""#HoaDonActive"").val(id > 0 ? obj.active : """");

            if(id==0){
                $(""#HoaDonActive"").val(1);
                $(""#HoaDonCreatedTime"").val(new Date().toISOString().replace(/T/, ' ').replace(/\..+/, ''));
            }
            else{
                // correcting data
                //$('#buyProvinceId').val(obj.provinceId.split("", "")).trigger('change');
                
            }
            formatNumber();
        }


        function updateItem(id) {
            var actionName = (id == 0 ? ""Create"" : ""Update"");
            let obj = getItemById(id);
            let objName = id > 0 ? obj.name : "" "";

            validateInputNumber();

     ");
            WriteLiteral(@"       // ""id"": $(""#HoaDonId"").val(),
            // ""name"": $(""#HoaDonName"").val(),
            // ""description"": $(""#HoaDonDescription"").val(),
            // ""createdTime"": $(""#HoaDonCreatedTime"").val(),
            // ""active"": $(""#HoaDonActive"").val()
            var updatingObj = {
                		""maHD"": $(""#HoaDonMaHD"").val(),
		""ngayHD"": $(""#HoaDonNgayHD"").val(),
		""tongTien"": $(""#HoaDonTongTien"").val(),

            };

            // correcting data
            //updatingObj.provinceId = updatingObj.provinceId.join("", "");
            

            Swal.fire({
                title: 'Are you sure?',
                text: ""Performing "" + actionName + "" item "" + objName,
                icon: 'info',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#443',
                confirmButtonText: 'Yes, confirm!'
            }).then((result) => {
                if (result.value) {
                    $(""#modal-");
            WriteLiteral(@"id"").modal('hide');

                    //CALL AJAX TO UPDATE
                    if (id > 0) {
                        $.ajax({
                            url: systemURL+ ""HoaDon/api/update"",
                            type: ""POST"",
                            contentType: ""application/json"",
                            data: JSON.stringify(updatingObj),
                            success: function (responseData) {
                                // debugger;
                                if (responseData.status == 200 && responseData.message === ""SUCCESS"") {
                                    Swal.fire(
                                        'Updated!',
                                        'Item ' + objName + ' has been successfully updated!',
                                        'success'
                                    );
                                    updateTable(id,updatingObj,""update"");
                                    var updatedItemIndex= dataSource.findInd");
            WriteLiteral(@"ex(item => parseInt(item.id) === id);
                                    dataSource[updatedItemIndex] = updatingObj;
                                }
                            },
                            error: function (e) {
                                //console.log(e.message);
                                Swal.fire(
                                    'Error!',
                                    'Could\' update item, please check your data',
                                    'error'
                                );
                            }
                        });
                    };

                    //CALL AJAX TO CREATE
                    if (id == 0) {
                        updatingObj.id = 1;
                        delete updatingObj[""id""]
                        updatingObj.active = 1;
                        updatingObj.createdTime = new Date();
                        console.log(updatingObj);
                        $.ajax({
              ");
            WriteLiteral(@"              url:systemURL + ""HoaDon/api/add"",
                            type: ""POST"",
                            contentType: ""application/json"",
                            data: JSON.stringify(updatingObj),
                            success: function (responseData) {
                                // debugger;
                                if (responseData.status == 201 && responseData.message === ""CREATED"") {
                                    Swal.fire(
                                        'Created!',
                                        'New item has been successfully created!',
                                        'success'
                                    );
                                    updatingObj = responseData.data;
                                    dataSource.push(updatingObj);
                                    updateTable(0,updatingObj,""add"");
                                }
                            },
                            error: funct");
            WriteLiteral(@"ion (e) {
                                //console.log(e.message);
                                Swal.fire(
                                    'Error!',
                                    'Could\' create item, please check your data',
                                    'error'
                                );
                            }
                        });
                    }
                }
            })
        }

        function deleteItem(id) {
            let obj = getItemById(id);
            Swal.fire({
                title: 'Are you sure?',
                text: ""You won't be able to revert this!"",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.value) {

                    //CALL AJAX TO DELETE
                    $.ajax({");
            WriteLiteral(@"
                        url: systemURL + ""HoaDon/api/delete"",
                        type: ""POST"",
                        contentType: ""application/json"",
                        data: JSON.stringify({ ""id"": id }),
                        success: function (responseData) {
                            // debugger;
                            if (responseData.status == 200 && responseData.message === ""SUCCESS"") {
                                Swal.fire(
                                    'Deleted!',
                                    'Item ' + obj.name + ' has been deleted.',
                                    'success'
                                );
                                updateTable(id,0,""delete"");
                            }
                        },
                        error: function (e) {
                            //console.log(e.message);
                            Swal.fire(
                                'Error!',
                                'Item");
            WriteLiteral(@" ' + obj.name + ' can\'t be deleted.',
                                'error'
                            );
                        }
                    });

                }
            })
        }

        function updateTable(id,obj,action) {
            if(action === ""delete""){ 
                table.row(""#row""+id).remove().draw();
            }

            if(action === ""add""){
                console.log(""Added:""+obj);

                //var addedItems = [obj];
                var addedItems = obj;
                var addedValues =[];


                addedItems.forEach(function (item, index) {
                    // console.log(item, index);
                    var rowContent = """";
                    addedValues.push(""<td style='text-align: center;'></td>"");
                    for (var key in item) {
                        if (item.hasOwnProperty(key)) {
                            // console.log(key + "" -> "" + item[key]);
                            if (showItem");
            WriteLiteral(@".includes(key)) {
                                if (key != ""photo"") {
                                    addedValues.push (""<td class='row"" + item.id + ""-column column-"" + key + ""' property='"" + key + ""'>"" + item[key] + ""</td>"");
                                }
                                else {
                                    addedValues.push (""<td class='row"" + item.id + ""-column column-"" + key + ""' property='"" + key + ""'><img src='"" + item[key] + ""' style='height:80px;' /></td>"");
                                }
                            }
                        }
                    }
                    addedValues.push(""<td style='text-align: center;'><a onclick='editItem("" + item.id + "")'><i class='fa fa-edit fa-2x' style='color:#03a9f4'></i></a></td>"");
                    addedValues.push(""<td style='text-align: center;'><a onclick='deleteItem("" + item.id + "")'><i class='fa fa-trash fa-2x' style='color:#e91e63'></i></a></td>"");

                    table.row.add(addedVa");
            WriteLiteral(@"lues).draw();
                });
                // location.reload();
            }

            if(action === ""update""){
                // alert(id);
                $("".row""+id+""-column"").each(function(){
                    var propertyName = $(this).attr(""property"");
                    console.log(propertyName);
                    
                    for (var key in obj) {
                        if (key === propertyName && obj.hasOwnProperty(key)) {
                            if(key === ""photo""){
                                $(this).children().attr(""src"",obj[key]);
                            }
                            else{
                                this.innerText = obj[key];
                            }
                        }
                    }

                });
            }

            //Update columns with foreign key
            // var NO_FKFKUpdateSelector = 'tr';
            // if( !(typeof(id) === 'undefined')) {
            //     NO_FKF");
            WriteLiteral(@"KUpdateSelector = '#row'+id;
            // }
            // $('#tableData tbody '+NO_FKFKUpdateSelector+' td[property=NO_FKId]').each(function(){
            //     // debugger;
            //     var HoaDonId = parseInt($(this).attr('class').replace('row','').replace('-column',''));
            //     var HoaDonObj = getItemById(HoaDonId);
            //     var NO_FKId = parseInt(HoaDonObj.NO_FKId);
            //     var NO_FKObj = NO_FKData.find(item => parseInt(item.id) === NO_FKId);
            //     $(this).text(NO_FKObj.name);
            //     // console.log('FK updated for Staff '+HoaDonId);
            // });
            
            
            formatNumber();
        }


        function getItemById(id) {
            const result = dataSource.find(item => parseInt(item.id) === id);
            return result;
        } 

            
    </script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
